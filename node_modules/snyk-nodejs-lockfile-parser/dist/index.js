"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
require("source-map-support/register");
var fs = require("fs");
var path = require("path");
var _ = require("lodash");
var parsers_1 = require("./parsers");
exports.DepType = parsers_1.DepType;
exports.LockfileType = parsers_1.LockfileType;
var package_lock_parser_1 = require("./parsers/package-lock-parser");
var yarn_lock_parse_1 = require("./parsers/yarn-lock-parse");
var get_node_runtime_version_1 = require("./get-node-runtime-version");
function buildDepTree(manifestFileContents, lockFileContents, includeDev, lockfileType) {
    if (includeDev === void 0) { includeDev = false; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var lockfileParser, unsupportedRuntimeError, manifestFile, lockFile;
        return tslib_1.__generator(this, function (_a) {
            if (!lockfileType) {
                lockfileType = parsers_1.LockfileType.npm;
            }
            switch (lockfileType) {
                case parsers_1.LockfileType.npm:
                    lockfileParser = new package_lock_parser_1.PackageLockParser();
                    break;
                case parsers_1.LockfileType.yarn:
                    // parsing yarn.lock is supported for Node.js v6 and higher
                    if (get_node_runtime_version_1.default() >= 6) {
                        lockfileParser = new yarn_lock_parse_1.YarnLockParser();
                    }
                    else {
                        unsupportedRuntimeError = new Error();
                        unsupportedRuntimeError.name = 'UnsupportedRuntimeError';
                        // tslint:disable:max-line-length
                        unsupportedRuntimeError.message = 'Parsing `yarn.lock` is not supported on Node.js version less than 6. Please upgrade your Node.js environment or use `package-lock.json`';
                        throw unsupportedRuntimeError;
                    }
                    break;
                default:
                    throw new Error("Unsupported lockfile type " + lockfileType + " provided.\n        Only 'npm' or 'yarn' is currently supported.");
            }
            manifestFile = parsers_1.parseManifestFile(manifestFileContents);
            lockFile = lockfileParser.parseLockFile(lockFileContents);
            return [2 /*return*/, lockfileParser.getDependencyTree(manifestFile, lockFile, includeDev)];
        });
    });
}
exports.buildDepTree = buildDepTree;
function buildDepTreeFromFiles(root, manifestFilePath, lockFilePath, includeDev) {
    if (includeDev === void 0) { includeDev = false; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var lockFileType, manifestFileFullPath, lockFileFullPath, manifestFileContents, lockFileContents;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!root || !manifestFilePath || !lockFilePath) {
                        throw new Error('Missing required parameters for buildDepTreeFromFiles()');
                    }
                    if (_.endsWith(lockFilePath, 'package-lock.json')) {
                        lockFileType = parsers_1.LockfileType.npm;
                    }
                    else if (_.endsWith(lockFilePath, 'yarn.lock')) {
                        lockFileType = parsers_1.LockfileType.yarn;
                    }
                    else {
                        throw new Error("Unknown lockfile " + lockFilePath + ".\n      Please provide either package-lock.json or yarn.lock.");
                    }
                    manifestFileFullPath = path.resolve(root, manifestFilePath);
                    lockFileFullPath = path.resolve(root, lockFilePath);
                    if (!fs.existsSync(manifestFileFullPath)) {
                        throw new Error("Target file package.json not found at location: " + manifestFileFullPath);
                    }
                    if (!fs.existsSync(lockFileFullPath)) {
                        throw new Error("Lockfile not found at location: " + lockFileFullPath);
                    }
                    manifestFileContents = fs.readFileSync(manifestFileFullPath, 'utf-8');
                    lockFileContents = fs.readFileSync(lockFileFullPath, 'utf-8');
                    return [4 /*yield*/, buildDepTree(manifestFileContents, lockFileContents, includeDev, lockFileType)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.buildDepTreeFromFiles = buildDepTreeFromFiles;
//# sourceMappingURL=index.js.map