"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var _ = require("lodash");
var _1 = require("./");
var get_node_runtime_version_1 = require("../get-node-runtime-version");
var YarnLockParser = /** @class */ (function () {
    function YarnLockParser() {
        // @yarnpkg/lockfile doesn't work with Node.js < 6 and crashes just after
        // the import, so it has to be required conditionally
        // more details at https://github.com/yarnpkg/yarn/issues/6304
        if (get_node_runtime_version_1.default() < 6) {
            throw new Error('yarn.lock parsing is supported for Node.js v6 and higher.');
        }
        this.yarnLockfileParser = require('@yarnpkg/lockfile');
    }
    YarnLockParser.prototype.parseLockFile = function (lockFileContents) {
        try {
            var yarnLock = this.yarnLockfileParser.parse(lockFileContents);
            yarnLock.dependencies = yarnLock.object;
            yarnLock.type = _1.LockfileType.yarn;
            return yarnLock;
        }
        catch (e) {
            throw new Error("yarn.lock parsing failed with an error: " + e.message);
        }
    };
    YarnLockParser.prototype.getDependencyTree = function (manifestFile, lockfile, includeDev) {
        if (includeDev === void 0) { includeDev = false; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var yarnLock, depTree, topLevelDeps;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (lockfile.type !== _1.LockfileType.yarn) {
                            throw new Error('Unsupported lockfile provided. Please provide `package-lock.json`.');
                        }
                        yarnLock = lockfile;
                        depTree = {
                            dependencies: {},
                            hasDevDependencies: !_.isEmpty(manifestFile.devDependencies),
                            name: manifestFile.name,
                            version: manifestFile.version || '',
                        };
                        topLevelDeps = _1.getTopLevelDeps(manifestFile, includeDev);
                        // asked to process empty deps
                        if (_.isEmpty(manifestFile.dependencies) && !includeDev) {
                            return [2 /*return*/, depTree];
                        }
                        return [4 /*yield*/, Promise.all(topLevelDeps.map(function (dep) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                var _a, _b;
                                return tslib_1.__generator(this, function (_c) {
                                    switch (_c.label) {
                                        case 0:
                                            _a = depTree.dependencies;
                                            _b = dep.name;
                                            return [4 /*yield*/, this.buildSubTreeRecursiveFromYarnLock(dep, yarnLock, [])];
                                        case 1:
                                            _a[_b] = _c.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, depTree];
                }
            });
        });
    };
    YarnLockParser.prototype.buildSubTreeRecursiveFromYarnLock = function (searchedDep, lockFile, depPath) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var depSubTree, depKey, dep, newDeps;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        depSubTree = {
                            depType: searchedDep.dev ? _1.DepType.dev : _1.DepType.prod,
                            dependencies: {},
                            name: searchedDep.name,
                            version: '',
                        };
                        depKey = searchedDep.name + "@" + searchedDep.version;
                        dep = _.get(lockFile.object, depKey);
                        if (!dep) {
                            throw new Error("Dependency " + depKey + " was not found in yarn.lock.\n        Your package.json and yarn.lock are probably out of sync.\n        Please run \"yarn install\" and try again.");
                        }
                        if (!(depPath.indexOf(depKey) >= 0)) return [3 /*break*/, 1];
                        depSubTree.cyclic = true;
                        return [3 /*break*/, 3];
                    case 1:
                        depPath.push(depKey);
                        depSubTree.version = dep.version;
                        newDeps = _.entries(tslib_1.__assign({}, dep.dependencies, dep.optionalDependencies));
                        return [4 /*yield*/, Promise.all(newDeps.map(function (_a) {
                                var name = _a[0], version = _a[1];
                                return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                    var newDep, _b, _c;
                                    return tslib_1.__generator(this, function (_d) {
                                        switch (_d.label) {
                                            case 0:
                                                newDep = {
                                                    dev: searchedDep.dev,
                                                    name: name,
                                                    version: version,
                                                };
                                                _b = depSubTree.dependencies;
                                                _c = name;
                                                return [4 /*yield*/, this.buildSubTreeRecursiveFromYarnLock(newDep, lockFile, depPath.slice())];
                                            case 1:
                                                _b[_c] = _d.sent();
                                                return [2 /*return*/];
                                        }
                                    });
                                });
                            }))];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/, depSubTree];
                }
            });
        });
    };
    return YarnLockParser;
}());
exports.YarnLockParser = YarnLockParser;
//# sourceMappingURL=yarn-lock-parse.js.map