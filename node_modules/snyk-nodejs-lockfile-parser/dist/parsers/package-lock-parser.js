"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var _ = require("lodash");
var _1 = require("./");
var PackageLockParser = /** @class */ (function () {
    function PackageLockParser() {
    }
    PackageLockParser.prototype.parseLockFile = function (lockFileContents) {
        try {
            var packageLock = JSON.parse(lockFileContents);
            packageLock.type = _1.LockfileType.npm;
            return packageLock;
        }
        catch (e) {
            throw new Error("package-lock.json parsing failed with error " + e.message);
        }
    };
    PackageLockParser.prototype.getDependencyTree = function (manifestFile, lockfile, includeDev) {
        if (includeDev === void 0) { includeDev = false; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var packageLock, depTree, topLevelDeps;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (lockfile.type !== _1.LockfileType.npm) {
                            throw new Error('Unsupported lockfile provided. Please provide `package-lock.json`.');
                        }
                        packageLock = lockfile;
                        depTree = {
                            dependencies: {},
                            hasDevDependencies: !_.isEmpty(manifestFile.devDependencies),
                            name: manifestFile.name,
                            version: manifestFile.version || '',
                        };
                        topLevelDeps = _1.getTopLevelDeps(manifestFile, includeDev);
                        // asked to process empty deps
                        if (_.isEmpty(manifestFile.dependencies) && !includeDev) {
                            return [2 /*return*/, depTree];
                        }
                        return [4 /*yield*/, Promise.all(topLevelDeps.map(function (dep) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                var _a, _b;
                                return tslib_1.__generator(this, function (_c) {
                                    switch (_c.label) {
                                        case 0:
                                            _a = depTree.dependencies;
                                            _b = dep.name;
                                            return [4 /*yield*/, this.buildSubTreeRecursiveFromPackageLock(dep.name, ['dependencies'], packageLock, [], dep.dev)];
                                        case 1:
                                            _a[_b] = _c.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, depTree];
                }
            });
        });
    };
    PackageLockParser.prototype.buildSubTreeRecursiveFromPackageLock = function (depName, lockfilePath, lockFile, depPath, isDev) {
        if (isDev === void 0) { isDev = false; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var depSubTree, deps, dep, depKey, newDeps;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        depSubTree = {
                            depType: undefined,
                            dependencies: {},
                            name: depName,
                            version: '',
                        };
                        deps = _.get(lockFile, lockfilePath);
                        dep = _.get(deps, depName);
                        if (!dep) return [3 /*break*/, 4];
                        // update the tree
                        depSubTree.version = dep.version;
                        depSubTree.depType = (isDev || dep.dev) ? _1.DepType.dev : _1.DepType.prod;
                        depKey = depName + "@" + dep.version;
                        if (!(depPath.indexOf(depKey) >= 0)) return [3 /*break*/, 1];
                        depSubTree.cyclic = true;
                        return [3 /*break*/, 3];
                    case 1:
                        // if not, add it
                        depPath.push(depKey);
                        newDeps = dep.requires ? Object.keys(dep.requires) : [];
                        return [4 /*yield*/, Promise.all(newDeps.map(function (subDep) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                var _a, _b;
                                return tslib_1.__generator(this, function (_c) {
                                    switch (_c.label) {
                                        case 0:
                                            _a = depSubTree.dependencies;
                                            _b = subDep;
                                            return [4 /*yield*/, this.buildSubTreeRecursiveFromPackageLock(subDep, lockfilePath.concat([depName, 'dependencies']), lockFile, depPath.slice(), isDev)];
                                        case 1:
                                            _a[_b] = _c.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/, depSubTree];
                    case 4:
                        // tree was walked to the root and dependency was not found
                        if (!lockfilePath.length) {
                            throw new Error("Dependency " + depName + " was not found in package-lock.json.\n          Your package.json and package-lock.json are probably out of sync.\n          Please run \"npm install\" and try again.");
                        }
                        // dependency was not found on a current path, remove last key (move closer to the root) and try again
                        // visitedDepPaths can be passed by a reference, because traversing up doesn't update it
                        return [2 /*return*/, this.buildSubTreeRecursiveFromPackageLock(depName, lockfilePath.slice(0, -1), lockFile, depPath, isDev)];
                }
            });
        });
    };
    return PackageLockParser;
}());
exports.PackageLockParser = PackageLockParser;
//# sourceMappingURL=package-lock-parser.js.map