#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
require("source-map-support/register");
// assert supported node runtime version
var runtime = require("./runtime");
// require analytics as soon as possible to start measuring execution time
var analytics = require("../lib/analytics");
var alerts = require("../lib/alerts");
var sln = require("../lib/sln");
var args_1 = require("./args");
var copy_1 = require("./copy");
var spinner = require("../lib/spinner");
var errors = require("../lib/error");
var ansiEscapes = require("ansi-escapes");
var detect_1 = require("../lib/detect");
function runCommand(args) {
    return __awaiter(this, void 0, void 0, function () {
        var result, res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, args.method.apply(args, args.options._)];
                case 1:
                    result = _a.sent();
                    res = analytics({
                        args: args.options._,
                        command: args.command,
                    });
                    if (result && !args.options.quiet) {
                        if (args.options.copy) {
                            copy_1.copy(result);
                            console.log('Result copied to clipboard');
                        }
                        else {
                            console.log(result);
                        }
                    }
                    return [2 /*return*/, res];
            }
        });
    });
}
function handleError(args, error) {
    return __awaiter(this, void 0, void 0, function () {
        var command, res, result, erase;
        return __generator(this, function (_a) {
            spinner.clearAll();
            command = 'bad-command';
            if (error.code === 'VULNS') {
                // this isn't a bad command, so we won't record it as such
                command = args.command;
            }
            else if (!error.stack) { // log errors that are not error objects
                analytics.add('error', JSON.stringify(error));
                analytics.add('command', args.command);
            }
            else {
                // remove vulnerabilities from the errors
                // to keep the logs small
                if (error.stack && error.stack.vulnerabilities) {
                    delete error.vulnerabilities;
                }
                if (error.message && error.message.vulnerabilities) {
                    delete error.message.vulnerabilities;
                }
                analytics.add('error-message', error.message);
                analytics.add('error', error.stack);
                analytics.add('error-code', error.code);
                analytics.add('command', args.command);
            }
            res = analytics({
                args: args.options._,
                command: command,
            });
            if (args.options.debug) {
                console.log(error.stack);
            }
            else {
                if (!args.options.quiet) {
                    result = errors.message(error);
                    if (args.options.copy) {
                        copy_1.copy(result);
                        console.log('Result copied to clipboard');
                    }
                    else {
                        if (("" + error.code).indexOf('AUTH_') === 0) {
                            erase = ansiEscapes.eraseLines(4);
                            process.stdout.write(erase);
                        }
                        console.log(result);
                    }
                }
            }
            return [2 /*return*/, res];
        });
    });
}
function checkRuntime() {
    if (!runtime.isSupported(process.versions.node)) {
        console.error(process.versions.node + " is an unsupported nodejs " +
            ("runtime! Supported runtime range is '" + runtime.supportedRange + "'"));
        console.error('Please upgrade your nodejs runtime version and try again.');
        process.exit(1);
    }
}
// Check if user specify package file name as part of path
// and throw error if so.
function checkPaths(args) {
    for (var _i = 0, _a = args.options._; _i < _a.length; _i++) {
        var path = _a[_i];
        if (typeof path === 'string' && detect_1.isPathToPackageFile(path)) {
            throw new Error("Not a recognised option did you mean --file=" + path + ". " +
                'Check other options by running snyk --help');
        }
    }
}
function main() {
    return __awaiter(this, void 0, void 0, function () {
        var args, res, failed, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    checkRuntime();
                    args = args_1.args(process.argv);
                    if (args.options.file && args.options.file.match(/\.sln$/)) {
                        sln.updateArgs(args);
                    }
                    res = null;
                    failed = false;
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 5]);
                    checkPaths(args);
                    return [4 /*yield*/, runCommand(args)];
                case 2:
                    res = _a.sent();
                    return [3 /*break*/, 5];
                case 3:
                    error_1 = _a.sent();
                    failed = true;
                    return [4 /*yield*/, handleError(args, error_1)];
                case 4:
                    res = _a.sent();
                    return [3 /*break*/, 5];
                case 5:
                    if (!args.options.json) {
                        console.log(alerts.displayAlerts());
                    }
                    if (!process.env.TAP && failed) {
                        process.exit(1);
                    }
                    return [2 /*return*/, res];
            }
        });
    });
}
var cli = main().catch(function (e) {
    console.log('super fail', e.stack);
    process.exit(1);
});
if (module.parent) {
    module.exports = cli;
}
//# sourceMappingURL=index.js.map